/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <dt-bindings/zmk/bt.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#define PLOVER 0
#define QWER   1
#define SYM    2
#define NUM    3
 
/ {


        keymap {
                compatible = "zmk,keymap";
		
                plover_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |   Clear Part 1  |             													|   Clear Part 2  |
// |   NAV    |    S    |    T    |    P    |    H    |    ST1    |                   |    ST3    |    F    |    P    |    L    |    T    |    D    |
// |   SYM    |    S    |    K    |    W    |    R    |    ST2    |                   |    ST4    |    R    |    B    |    G    |    S    |    Z    |
//   	                          |    #    |    A    |     O     |                   |    E      |    U    |    #    |  

    bindings = <
      &to 1       &kp PLV_SL  &kp PLV_TL  &kp PLV_PL  &kp PLV_HL  &kp PLV_ST  &kp PLV_ST   &kp PLV_FR &kp PLV_PR &kp PLV_LR &kp PLV_TR  &kp PLV_DR  
      &mo SYM  &kp PLV_SL  &kp PLV_KL  &kp PLV_WL  &kp PLV_RL  &kp PLV_ST  &kp PLV_ST   &kp PLV_RR &kp PLV_BR &kp PLV_GR &kp PLV_SR  &kp PLV_ZR  
                                         &kp PLV_NM  &kp PLV_A   &kp PLV_O   &kp PLV_E    &kp PLV_U  &kp PLV_NM
    >;
    
};
		QWER_layer {

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |   Clear Part 1  |             													|   Clear Part 2  |
//    		 	             										              |   Ctrl  |    |
// |   STEN |   Q    |    W    |    E    |    R    |    T    |                   |    Y    |    U    |    I    |    O    |    P    |    BCSP     |
// |   UP   |   A    |    S    |    D    |    F    |    G    |                   |    H    |    J    |    K    |    L    |    :    |    ENTER    |///?????????????
// |   SYM  |   Z    |    X    |    C    |    V    |    B    |                   |    N    |    M    |    <    |    >    |    /    |     ESC     |
//   	                       |  BCSP   |   SPC   |  Shift  |                   |   ENT   |   SPC   |   BCSP  |	      |   ALT   |
//                                  |   CTRL  |  LALT  |                              |   BCSP  |   TAB   |
//                             |   NUM   |
      bindings = <
      &to 0       &kp Q  &kp W  &kp E &kp R &kp T     &kp Y &kp U &kp I &kp O &kp P &kp BACKSPACE
      &mo SYM     &kp Z  &kp X  &kp C &kp V &kp B     &kp N &kp M &kp LT &kp GT &kp SLASH &kp ESC 
            &lt NUM BACKSPACE &kp SPACE   &kp LSHIFT  	      &kp ENTER &kp SPACE &kp BACKSPACE
     >;
};


	       SYM_layer {

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |   Clear Part 1  |             													|   Clear Part 2  |
//    		 	             										              |   Ctrl  |
//	    |    1   |    2    |    3    |    4    |	5    |		         |    6    |    7    |    8    |    9    |    0    |	         |
// |   STEN |   !    |    @    |    {    |    }    |    |    |                   |    '    |    +    |    -    |    /    |    *    |     TAB     |
// |   UP   |   #    |    $    |    (    |    )    |    `    |                   |    H    |    J    |    K    |    L    |    :    |     ESC     |
// |   SYM  |   %    |    ^    |    [    |    ]    |    ~    |                   |    "    |    &    |    =    |    ,    |    .    |    SHIFT    |
//   	                       |   NUM   |    ;	   |    /    |                   |    ;    |    /    |   NUM   |	       
//                                          |   SPACE   |                               |   ENT   |   
        bindings = <
      &to 0       &kp EXCL   &kp AT     &kp LBRC &kp RBRC &kp PIPE2     &kp SQT  &kp PLUS &kp MINUS &kp FSLH  &kp STAR &kp TAB
      &mo SYM     &kp PRCNT  &kp CARET  &kp LBKT &kp RBKT &kp TILDE     &kp DQT  &kp AMPS &kp EQUAL &kp COMMA &kp DOT  &kp LSHIFT
                                        &mo NUM  &kp SEMI &kp FSLH  	&kp SEMI &kp FSLH &mo NUM
     >;
};

		NUM_layer {

// --------------------------------------------------------------------------------------------------------------------------------------	         |
// |   STEN |   1    |    2    |    3    |    4    |    5    |                   |    6    |    7    |    8    |    9    |    0    |    BCSP     |
// |   UP   |   A    |    S    |    D    |    F    |    G    |                   |    H    |    J    |    K    |    L    |    :    |    ENTER    |
// |   SYM  |   Z    |    X    |    C    |    V    |    B    |                   |    N    |    M    |    <    |    >    |    /    |     ESC     |
//   	                       |  BCSP   |   SPC   |  Shift  |                   |   ENT   |   SPC   |   BCSP  |	      |   ALT   |
//                                  |   CTRL  |  LALT  |                              |   BCSP  |   TAB   |
//                             |   NUM   |
      bindings = <
      &to 0       &kp N1  &kp N2  &kp N3 &kp N4 &kp N5     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp BACKSPACE
      &mo SYM     &kp Z  &kp X  &kp C &kp V &kp B     &kp N &kp M &kp LT &kp GT &kp SLASH &kp ESC 
            &lt NUM BACKSPACE &kp SPACE   &kp LSHIFT  	      &kp ENTER &kp SPACE &kp BACKSPACE
     >;
};
	};
///QWERY Thumbs
   combo_ctrl {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <25 26>;
            bindings = <&kp LCTRL>;
	    	};
    combos {
        compatible = "zmk,combos";
         combo_clear {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <0 11>;
            bindings = <&bt BT_CLR>;
	    	};
	 combo_output {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <1 10>;
            bindings = <&out OUT_TOG>;
	    	};
	combo_up {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <0 12>;
            bindings = <&kp UP>;
	    	};
	combo_a {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <1 13>;
            bindings = <&kp A>;
	    	};
	 combo_s {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <2 14>;
            bindings = <&kp S>;
	    	};
	 combo_d {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <3 15>;
            bindings = <&kp D>;
	    	};
	 combo_f {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <4 16>;
            bindings = <&kp F>;
	    	};
	 combo_g {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <5 17>;
            bindings = <&kp G>;
	    	};
	combo_tab {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <24  25>;
            bindings = <&kp TAB>;
	    	};
	 combo_h {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <6 18>;
            bindings = <&kp H>;
	    	};
	 combo_j {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <7 19>;
            bindings = <&kp J>;
	    	};
	 combo_k {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <8 20>;
            bindings = <&kp K>;
	    	};
	 combo_l {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <9 21>;
            bindings = <&kp L>;
	    	};
	 combo_colon {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <10 22>;
            bindings = <&kp COLON>;
	    	};
	 combo_enter {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <11 23>;
            bindings = <&kp ENTER>;
	    	};
	combo_bcsp {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <27  28>;
            bindings = <&kp BACKSPACE>;
	    	};
	combo_tab {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <28  29>;
            bindings = <&kp TAB>;
	    	};
        combo_alt {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <22  23>;
            bindings = <&kp RALT>;
	    	};
      combo_ctrl {
            timeout-ms = <50>;
	    layers = <1>;
            key-positions = <10  11>;
            bindings = <&kp LCTRL>;
	    	};

/// SYM Thumbs
      combo_space {
            timeout-ms = <50>;
	    layers = <2>;
            key-positions = <25  26>;
            bindings = <&kp SPACE>;
	    	};
      combo_enter {
            timeout-ms = <50>;
	    layers = <2>;
            key-positions = <27  28>;
            bindings = <&kp ENTER>;
	    	};
//// SYM Middle Layer
////|   #    |    $    |    (    |    )    |    `    |                   |    H    |    J    |    K    |    L    |    :    |     ESC     |
      combo_hash {
            timeout-ms = <50>;
	    layers = <2>;
            key-positions = <1  13>;
            bindings = <&kp HASH>;
	    	};
      combo_dollar {
            timeout-ms = <50>;
	    layers = <2>;
            key-positions = <2  14>;
            bindings = <&kp DLLR>;
	    	};
      combo_pren {
            timeout-ms = <50>;
	    layers = <2>;
            key-positions = <3  15>;
            bindings = <&kp LPAR>;
	    	};
      combo_grave {
            timeout-ms = <50>;
	    layers = <2>;
            key-positions = <4  16>;
            bindings = <&kp GRAVE>;
	    	};
      combo_escape {
            timeout-ms = <50>;
	    layers = <2>;
            key-positions = <11  23>;
            bindings = <&kp ESC >;
	    	};
    };
       		   

};
